<#

// LICENSE: LGPL 3 - https://www.gnu.org/licenses/gpl-3.0.txt

// s. http://blog.marcel-kloubert.de

#>
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ Import Namespace="System.Data" #>
<#@ Import Namespace="System.Data.SqlClient" #>
<#@ Import Namespace="System.Xml.XPath" #>
<#@ output extension=".cs"#><#

var ctx = new EnumGenerationContext(this);

foreach (var configFile in ctx.WORKING_DIRECTORY.GetFiles("*.xml")
                                                .Where(f => !f.Name.ToLower().Trim().EndsWith(".sample.xml")))
{
    this.GenerateEnumsFromConfigFile(configFile,
                                     ctx);
}

ctx.FILE_MANAGER.Process();

#>
<#+

void GenerateEnumsFromConfigFile(FileInfo configFile, EnumGenerationContext ctx)
{
    XDocument xmlDoc;
    using (var stream = configFile.OpenRead())
    {
        xmlDoc = XDocument.Load(stream);
    }

    var enumsElement = xmlDoc.Root;
    if (enumsElement == null)
    {
        return;
    }

    using (var conn = DatabaseConnection.FromConfig(enumsElement))
    {
        var namespaceExtension = Path.GetFileNameWithoutExtension(configFile.FullName).Trim();

        ctx.FILE_MANAGER.StartNewFile(namespaceExtension + ".AutoGenerated.cs");

        var @namespace = ctx.NAMESPACE + "." + namespaceExtension;
#>
namespace <#= @namespace #>
{
<#+
        foreach (var def in EnumDefinition.FromXml(enumsElement.Elements("enum")))
        {
            if (!string.IsNullOrWhiteSpace(def.Schema))
            {
#>
    namespace <#= def.Schema.Trim() #>
    {
<#+
            }

            var enumName = def.Table.Trim();
            if (!string.IsNullOrWhiteSpace(def.TargetName))
            {
                enumName = def.TargetName.Trim();
            }

            var enumType = "int";
            if (!string.IsNullOrWhiteSpace(def.ValueIdType))
            {
                enumType = def.ValueIdType.Trim();
            }

#>
        /// <summary>
        /// <#= (def.Summary ?? string.Empty).Trim() #>
        /// </summary>
        [global::System.Serializable]
        [global::System.Runtime.Serialization.DataContract]
        public enum <#= enumName #> : <#= enumType #>
        {
<#+

            foreach (var entry in def.LoadEntries(conn)
                                     .OrderBy(e => e.Name, StringComparer.InvariantCultureIgnoreCase))
            {
                var entryName = entry.Name.Trim();
                var entryId = entry.Id.ToString().Trim();
                var entryDesc = entry.Description ?? string.Empty;

#>
            /// <summary>
            /// <#= entryDesc.Trim() #>
            /// </summary>
            [global::System.Runtime.Serialization.EnumMember]
            <#= entryName #> = <#= entryId #>,
 
<#+
            }
#>
        }
<#+
            if (!string.IsNullOrWhiteSpace(def.Schema))
            {
#>
    }
<#+
            }
        }
#>
}
<#+
    }
}


enum DatabaseProvider
{
    ADO_MSSQL,
}

class EnumGenerationContext
{
    public readonly CodeGenerationTools CODE;
    public readonly EntityFrameworkTemplateFileManager FILE_MANAGER;
    public readonly MetadataLoader LOADER;
    public readonly string NAMESPACE;
    public readonly GeneratedTextTransformation PARENT;
    public readonly CodeRegion REGION;
    public readonly MetadataTools TOOLS;
    public readonly DirectoryInfo WORKING_DIRECTORY;

    public EnumGenerationContext(GeneratedTextTransformation parent)
    {
        this.PARENT = parent;
        this.WORKING_DIRECTORY = new DirectoryInfo(this.PARENT.Host.ResolvePath("./"));

        this.CODE = new CodeGenerationTools(this.PARENT);
        this.LOADER = new MetadataLoader(this.PARENT);
        this.REGION = new CodeRegion(this.PARENT, 1);
        this.TOOLS = new MetadataTools(this.PARENT);
        this.FILE_MANAGER = EntityFrameworkTemplateFileManager.Create(this.PARENT);

        this.NAMESPACE = this.CODE.VsNamespaceSuggestion();
    }
}

class DatabaseConnection : IDisposable
{
    private DatabaseConnection()
    {

    }

    public IDbConnection Connection
    {
        get;
        private set;
    }

    public DatabaseProvider Provider
    {
        get;
        private set;
    }

    public void Dispose()
    {
        this.Connection.Dispose();
        GC.SuppressFinalize(this);
    }

    public static DatabaseConnection FromConfig(XElement enumsElement)
    {
        var result = new DatabaseConnection();

        var databaseElement = enumsElement.Elements("database").Single();
        var provider = (DatabaseProvider)Enum.Parse(typeof(DatabaseProvider),
                                                    databaseElement.Attribute("provider").Value.Trim(),
                                                    true);

        switch (provider)
        {
            case DatabaseProvider.ADO_MSSQL:
                result.Connection = new SqlConnection(databaseElement.Elements("connection_string").Single().Value);
                break;

            default:
                result = null;
                break;
        }

        if (result == null)
        {
            throw new NotSupportedException(provider.ToString());
        }
        else
        {
            result.Provider = provider;
            result.Connection.Open();
        }

        return result;
    }

    public void SetupCommandForLoadingValues(IDbCommand cmd, EnumDefinition def)
    {
        var throwException = true;

        switch (this.Provider)
        {
            case DatabaseProvider.ADO_MSSQL:
                {
                    string tablePrefix = null;
                    if (!string.IsNullOrWhiteSpace(def.Schema))
                    {
                        tablePrefix = string.Format("{0}.",
                                                    def.Schema.Trim());
                    }

                    if (string.IsNullOrWhiteSpace(def.ValueDescriptionColumn))
                    {
                        cmd.CommandText = string.Format(@"SELECT tt.[{0}] AS TMName, tt.[{1}] AS TMValue, NULL AS TMDescription
                                                          FROM {2}[{3}] tt;", def.ValueNameColumn
                                                                            , def.ValueIdColumn
                                                                            , tablePrefix
                                                                            , def.Table);
                    }
                    else
                    {
                        cmd.CommandText = string.Format(@"SELECT tt.[{0}] AS TMName, tt.[{1}] AS TMValue, tt.[{2}] AS TMDescription
                                                          FROM {3}[{4}] tt;", def.ValueNameColumn
                                                                            , def.ValueIdColumn
                                                                            , def.ValueDescriptionColumn.Trim()
                                                                            , tablePrefix
                                                                            , def.Table);
                    }

                    throwException = false;
                }
                break;
        }

        if (throwException)
        {
            throw new NotSupportedException(this.Provider.ToString());
        }
    }
}

class EnumDefinition
{
    private EnumDefinition()
    {

    }

    public string Schema
    {
        get;
        private set;
    }

    public string Summary
    {
        get;
        private set;
    }

    public string Table
    {
        get;
        private set;
    }

    public string TargetName
    {
        get;
        private set;
    }

    public string ValueDescriptionColumn
    {
        get;
        private set;
    }

    public string ValueIdColumn
    {
        get;
        private set;
    }

    public string ValueIdType
    {
        get;
        private set;
    }

    public string ValueNameColumn
    {
        get;
        private set;
    }

    public static IEnumerable<EnumDefinition> FromXml(IEnumerable<XElement> elements)
    {
        foreach (var enumElement in elements)
        {
            var result = new EnumDefinition();
            result.Table = enumElement.Attribute("name").Value;

            var schemaAttrib = enumElement.Attribute("schema");
            if (schemaAttrib != null)
            {
                result.Schema = schemaAttrib.Value;
            }

            var targetNameAttrib = enumElement.Attribute("targetName");
            if (targetNameAttrib != null)
            {
                result.TargetName = targetNameAttrib.Value;
            }

            result.ValueNameColumn = enumElement.Attribute("valueNameFrom").Value;
            result.ValueIdColumn = enumElement.Attribute("valueIdFrom").Value;

            var valueDescriptionFromAttrib = enumElement.Attribute("valueDescriptionFrom");
            if (valueDescriptionFromAttrib != null)
            {
                result.ValueDescriptionColumn = valueDescriptionFromAttrib.Value;
            }

            var valueIdTypeAttrib = enumElement.Attribute("valueIdType");
            if (valueIdTypeAttrib != null)
            {
                result.ValueIdType = valueIdTypeAttrib.Value;
            }

            var summaryElement = enumElement.Elements("summary").SingleOrDefault();
            if (summaryElement != null)
            {
                result.Summary = summaryElement.Value;
            }

            yield return result;
        }
    }

    public IEnumerable<EnumEntry> LoadEntries(DatabaseConnection conn)
    {
        return EnumEntry.LoadEntries(this, conn);
    }
}

class EnumEntry
{
    private EnumEntry()
    {

    }

    public EnumDefinition Definition
    {
        get;
        private set;
    }

    public string Description
    {
        get;
        private set;
    }

    public object Id
    {
        get;
        private set;
    }

    public string Name
    {
        get;
        private set;
    }

    public static IEnumerable<EnumEntry> LoadEntries(EnumDefinition def, DatabaseConnection conn)
    {
        using (var cmd = conn.Connection.CreateCommand())
        {
            conn.SetupCommandForLoadingValues(cmd, def);

            using (var reader = cmd.ExecuteReader())
            {
                while (reader.Read())
                {
                    var result = new EnumEntry();
                    result.Definition = def;
                    result.Name = reader.GetString(0).Trim();
                    result.Id = reader.GetValue(1);
                    result.Description = reader.IsDBNull(2) ? null : reader.GetString(2).Trim();

                    yield return result;
                }
            }
        }
    }
}

#>