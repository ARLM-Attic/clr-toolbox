<#

// LICENSE: LGPL 3 - https://www.gnu.org/licenses/gpl-3.0.txt

// s. http://blog.marcel-kloubert.de

#>
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#><#

var ctx = new EntityGenerationContext(this);

foreach (var edmxFile in ctx.WORKING_DIRECTORY.GetFiles("*.edmx"))
{
    this.GenerateEntitiesFromEDMXFile(edmxFile, ctx);
}

ctx.FILE_MANAGER.Process();

#>
<#+

void BeginNamespace(string namespaceExtension, EntityGenerationContext ctx)
{
#>
// LICENSE: LGPL 3 - https://www.gnu.org/licenses/gpl-3.0.txt

// s. http://blog.marcel-kloubert.de


using System;

namespace <#= ctx.CODE.EscapeNamespace(ctx.NAMESPACE) #>
{
<#+

    if (!string.IsNullOrWhiteSpace(namespaceExtension))
    {
#>
    namespace <#= ctx.CODE.EscapeNamespace(namespaceExtension) #>
    {
<#+
        ctx.PARENT.PushIndent(CodeRegion.GetIndent(1));
    }
#>
<#+
}

void EndNamespace(string namespaceExtension, EntityGenerationContext ctx)
{
    if (!string.IsNullOrWhiteSpace(namespaceExtension))
    {
        ctx.PARENT.PopIndent();
#>
    }
}
<#+
    }
}

void GenerateEntitiesFromEDMXFile(FileInfo edmxFile, EntityGenerationContext ctx)
{
    var edmxFilePath = edmxFile.FullName;
    var items = ctx.LOADER.CreateEdmItemCollection(edmxFilePath);
    
    var namespaceExtension = Path.GetFileNameWithoutExtension(edmxFilePath).Trim();

    ctx.FILE_MANAGER.StartNewFile(namespaceExtension + ".AutoGenerated.cs");
    
    this.BeginNamespace(namespaceExtension, ctx);

    var baseEntityNamespace = ctx.CODE.VsNamespaceSuggestion() + "." + namespaceExtension;
    var baseEntityInterfaceName = string.Format("I{0}Entity",
                                                namespaceExtension);
    var baseEntityBaseClassName = string.Format("{0}EntityBase",
                                                namespaceExtension);
#>
    #region BASE ENTITIES: <#= namespaceExtension #>

    /// <summary>
    /// Describes a '<#= namespaceExtension #>' entity.
    /// </summary>
    public partial interface <#= ctx.CODE.Escape(baseEntityInterfaceName) #> : global::MarcelJoachimKloubert.ApplicationServer.Data.Entities.IAppServerEntity
    {

    }

    /// <summary>
    /// A basic '<#= namespaceExtension #>' entity.
    /// </summary>
    public abstract partial class <#= ctx.CODE.Escape(baseEntityBaseClassName) #> : global::MarcelJoachimKloubert.ApplicationServer.Data.Entities.AppServerEntityBase, global::<#= ctx.CODE.Escape(baseEntityNamespace) #>.<#= ctx.CODE.Escape(baseEntityInterfaceName) #>
    {
        #region Constructors (1)

        /// <summary>
        /// Initializes a new instance of the <see cref="<#= ctx.CODE.Escape(baseEntityBaseClassName) #>" /> class.
        /// </summary>
        protected <#= ctx.CODE.Escape(baseEntityBaseClassName) #>()
        {

        }

        #endregion
    }

    #endregion
 
<#+

    var entities = items.GetItems<EntityType>().OrderBy(e => e.Name,
                                                             StringComparer.InvariantCultureIgnoreCase);

    var schemas = entities.Select(e => TryGetSchemaName(edmxFile, e, ctx))
                          .Distinct()
                          .OrderBy(s => s,
                                   StringComparer.InvariantCultureIgnoreCase);

    foreach (var schema in schemas)
    {
        var schemaNamespace = ctx.CODE.VsNamespaceSuggestion() + "." + namespaceExtension;
        var schemaInterfaceName = baseEntityInterfaceName;
        var schemaBaseClassName = baseEntityBaseClassName;
        if (!IsDefaultSchema(schema))
        {
            schemaNamespace += "." + schema.Trim();

            schemaInterfaceName = string.Format("I{0}Entity",
                                                schema.Trim());

            schemaBaseClassName = string.Format("{0}EntityBase",
                                                schema.Trim());

#>
    namespace <#= ctx.CODE.EscapeNamespace(schema) #>
    {
        #region SCHEMA ENTITIES: <#= ctx.CODE.EscapeNamespace(schema) #>

        /// <summary>
        /// Describes an entity for the '<#= schema #>' schema.
        /// </summary>
        public partial interface <#= ctx.CODE.Escape(schemaInterfaceName) #> : global::<#= baseEntityNamespace #>.<#= baseEntityInterfaceName #>
        {

        }

        /// <summary>
        /// A basic entity for the '<#= schema #>' schema.
        /// </summary>
        public abstract partial class <#= ctx.CODE.Escape(schemaBaseClassName) #> : global::<#= baseEntityNamespace #>.<#= baseEntityBaseClassName #>, global::<#= schemaNamespace #>.<#= ctx.CODE.Escape(schemaInterfaceName) #>
        {
            #region Constructors (1)

            /// <summary>
            /// Initializes a new instance of the <see cref="<#= ctx.CODE.Escape(schemaBaseClassName) #>" /> class.
            /// </summary>
            protected <#= ctx.CODE.Escape(schemaBaseClassName) #>()
            {

            }

            #endregion
        }

        #endregion
<#+
        }

        foreach (var entity in entities.Where(e => TryGetSchemaName(edmxFile, e, ctx) == schema))
        {
            var scalarFields = entity.Properties
                                     .Where(p => (p.TypeUsage.EdmType is PrimitiveType) &&
                                                 p.DeclaringType == entity)
                                     .OrderBy(p => p.Name, StringComparer.InvariantCultureIgnoreCase);

            var entityInterfaceName = string.Format("I{0}",
                                                    ctx.CODE.Escape(entity));

        #>
 
        #region ENTITY: <#= ctx.CODE.Escape(entity) #>

        /// <summary>
        /// Describes an '<#= ctx.CODE.Escape(entity) #>' entity.
        /// </summary>
        public partial interface <#= entityInterfaceName #> : global::<#= schemaNamespace #>.<#= schemaInterfaceName #>
        {
            #region Scalar fields (<#= scalarFields.LongCount() #>)
<#+
            foreach (var sf in scalarFields)
            {
#>
            /// <summary>
            /// Gets or sets the scalar field '<#= ctx.CODE.Escape(sf.Name) #>'.
            /// </summary>
            global::<#= ctx.TOOLS.ClrType(sf.TypeUsage).FullName #> <#= ctx.CODE.Escape(sf.Name) #> { get; set; }
 
<#+
            }
#>

            #endregion
        }
        
        /// <summary>
        /// An '<#= ctx.CODE.Escape(entity) #>' entity.
        /// </summary>
        [global::MarcelJoachimKloubert.CLRToolbox.Data.TMTable(Name = <#= ctx.CODE.CreateLiteral(entity.Name) #>, Schema = <#= ctx.CODE.CreateLiteral(schema) #>)]
        [global::System.Runtime.Serialization.DataContract(IsReference = true)]
        [global::System.Serializable]
        public partial class <#= ctx.CODE.Escape(entity) #> : global::<#= schemaNamespace #>.<#= schemaBaseClassName #>, global::<#= schemaNamespace #>.<#= entityInterfaceName #>
        {
            #region Constructors (1)
            
            /// <summary>
            /// Initializes a new instance of <see cref="<#= ctx.CODE.Escape(entity) #>" /> class.
            /// </summary>
            public <#= ctx.CODE.Escape(entity) #>()
            {
                
            }

            #endregion

            #region Scalar fields (<#= scalarFields.LongCount() #>)
<#+
            foreach (var sf in scalarFields)
            {
                var fieldName = ctx.CODE.Escape(sf.Name);
                var privateFieldName = "_sf_" + fieldName;
                var fieldType = ctx.TOOLS.ClrType(sf.TypeUsage).FullName;

#>

            private global::<#= fieldType #> <#= privateFieldName #>;

            /// <summary>
            /// 
            /// </summary>
            /// <see cref="global::<#= schemaNamespace #>.<#= entityInterfaceName #>.<#= fieldName #>" />
            [global::MarcelJoachimKloubert.CLRToolbox.Data.TMColumn(ClrType = typeof(global::<#= fieldType #>), IsKey = <#= ctx.CODE.CreateLiteral(ctx.TOOLS.IsKey(sf)) #>, IsNullable = <#= ctx.CODE.CreateLiteral(ctx.TOOLS.IsNullable(sf)) #>, Name = <#= ctx.CODE.CreateLiteral(fieldName) #>)]
            [global::System.Runtime.Serialization.DataMember(EmitDefaultValue = true, Name = <#= ctx.CODE.CreateLiteral(fieldName) #>)]
            public global::<#= fieldType #> <#= fieldName #>
            {
                get { return this.<#= privateFieldName #>; }
                set
                {
                    if (!object.Equals(this.<#= privateFieldName #>, value))
                    {
                        this.OnPropertyChanging(<#= ctx.CODE.CreateLiteral(fieldName) #>);
                        this.<#= privateFieldName #> = value;
                        this.OnPropertyChanged(<#= ctx.CODE.CreateLiteral(fieldName) #>);
                    }
                }
            }
<#+
            }
#>

            #endregion

            #region Methods (9)
            
            /// <summary>
            /// Builds a new <see cref="<#= ctx.CODE.Escape(entity) #>" /> object from a data record.
            /// </summary>
            /// <typeparam name="TRec">Type of the data record.</typeparam>
            /// <param name="rec">The data record from where loading the data from.</param>
            /// <param name="setup">The optional setup action that is invoked after data have been loaded into that object.</param>
            /// <exception cref="global::System.ArgumentNullException">
            /// <paramref name="rec" /> is <see langword="null" />.
            /// </exception>
            /// <returns>The created object.</returns>
            public static <#= ctx.CODE.Escape(entity) #> Build<TRec>(TRec rec, global::System.Action<<#= ctx.CODE.Escape(entity) #>, TRec> setup = null) where TRec : global::System.Data.IDataRecord
            {
                if (rec == null)
                    throw new global::System.ArgumentNullException("rec");

                var result = new <#= ctx.CODE.Escape(entity) #>();
                result.LoadFrom<TRec>(rec: rec, setup: setup);

                return result;
            }

            /// <summary>
            /// Builds a new <see cref="<#= ctx.CODE.Escape(entity) #>" /> object from a data record.
            /// </summary>
            /// <typeparam name="TRec">Type of the data record.</typeparam>
            /// <typeparam name="S">The type of the last parameter for <paramref name="setup" />.</typeparam>
            /// <param name="rec">The data record from where loading the data from.</param>
            /// <param name="setup">The optional setup action that is invoked after data have been loaded into that object.</param>
            /// <param name="setupState">The last parameter for <paramref name="setup" />.</param>
            /// <exception cref="global::System.ArgumentNullException">
            /// <paramref name="rec" /> is <see langword="null" />.
            /// </exception>
            /// <returns>The created object.</returns>
            public static <#= ctx.CODE.Escape(entity) #> Build<TRec, S>(TRec rec, global::System.Action<<#= ctx.CODE.Escape(entity) #>, TRec, S> setup = null, S setupState = default(S)) where TRec : global::System.Data.IDataRecord
            {
                if (rec == null)
                    throw new global::System.ArgumentNullException("rec");

                var result = new <#= ctx.CODE.Escape(entity) #>();
                result.LoadFrom<TRec, S>(rec: rec, setup: setup, setupState: setupState);

                return result;
            }

            /// <summary>
            /// Builds a new <see cref="<#= ctx.CODE.Escape(entity) #>" /> object from a data record.
            /// </summary>
            /// <typeparam name="TRec">Type of the data record.</typeparam>
            /// <typeparam name="S">The type of the last parameter for <paramref name="setup" />.</typeparam>
            /// <param name="rec">The data record from where loading the data from.</param>
            /// <param name="setup">The optional setup action that is invoked after data have been loaded into that object.</param>
            /// <param name="setupStateFactory">The optional factory for last parameter of <paramref name="setup" />.</param>
            /// <exception cref="global::System.ArgumentNullException">
            /// <paramref name="rec" /> is <see langword="null" />.
            /// </exception>
            /// <returns>The created object.</returns>
            public static <#= ctx.CODE.Escape(entity) #> Build<TRec, S>(TRec rec, global::System.Action<<#= ctx.CODE.Escape(entity) #>, TRec, S> setup = null, global::System.Func<<#= ctx.CODE.Escape(entity) #>, TRec, S> setupStateFactory = null) where TRec : global::System.Data.IDataRecord
            {
                if (rec == null)
                    throw new global::System.ArgumentNullException("rec");

                var result = new <#= ctx.CODE.Escape(entity) #>();
                result.LoadFrom<TRec, S>(rec: rec, setup: setup, setupStateFactory: setupStateFactory);

                return result;
            }

            /// <summary>
            /// Builds a list of new <see cref="<#= ctx.CODE.Escape(entity) #>" /> objects from a data reader.
            /// </summary>
            /// <typeparam name="TReader">Type of the data reader.</typeparam>
            /// <param name="reader">The data reader from where loading the data from.</param>
            /// <param name="setup">The optional setup action that is invoked after data have been loaded into that object.</param>
            /// <exception cref="global::System.ArgumentNullException">
            /// <paramref name="reader" /> is <see langword="null" />.
            /// </exception>
            /// <returns>The lazy loaded sequence of new objects.</returns>
            public static global::System.Collections.Generic.IEnumerable<<#= ctx.CODE.Escape(entity) #>> BuildAll<TReader>(TReader reader, global::System.Action<<#= ctx.CODE.Escape(entity) #>, TReader> setup = null) where TReader : global::System.Data.IDataReader
            {
                if (reader == null)
                    throw new global::System.ArgumentNullException("reader");

                while (reader.Read())
                    yield return Build<TReader>(rec: reader, setup: setup);
            }

            /// <summary>
            /// Builds a list of new <see cref="<#= ctx.CODE.Escape(entity) #>" /> objects from a data reader.
            /// </summary>
            /// <typeparam name="TReader">Type of the data reader.</typeparam>
            /// <typeparam name="S">The type of the last parameter for <paramref name="setup" />.</typeparam>
            /// <param name="reader">The data reader from where loading the data from.</param>
            /// <param name="setup">The optional setup action that is invoked after data have been loaded into that object.</param>
            /// <param name="setupState">The last parameter for <paramref name="setup" />.</param>
            /// <exception cref="global::System.ArgumentNullException">
            /// <paramref name="reader" /> is <see langword="null" />.
            /// </exception>
            /// <returns>The lazy loaded sequence of new objects.</returns>
            public static global::System.Collections.Generic.IEnumerable<<#= ctx.CODE.Escape(entity) #>> BuildAll<TReader, S>(TReader reader, global::System.Action<<#= ctx.CODE.Escape(entity) #>, TReader, S> setup = null, S setupState = default(S)) where TReader : global::System.Data.IDataReader
            {
                if (reader == null)
                    throw new global::System.ArgumentNullException("reader");

                while (reader.Read())
                    yield return Build<TReader, S>(rec: reader, setup: setup, setupState: setupState);
            }

            /// <summary>
            /// Builds a list of new <see cref="<#= ctx.CODE.Escape(entity) #>" /> objects from a data reader.
            /// </summary>
            /// <typeparam name="TReader">Type of the data reader.</typeparam>
            /// <typeparam name="S">The type of the last parameter for <paramref name="setup" />.</typeparam>
            /// <param name="reader">The data reader from where loading the data from.</param>
            /// <param name="setup">The optional setup action that is invoked after data have been loaded into that object.</param>
            /// <param name="setupStateFactory">The optional factory for last parameter of <paramref name="setup" />.</param>
            /// <exception cref="global::System.ArgumentNullException">
            /// <paramref name="reader" /> is <see langword="null" />.
            /// </exception>
            /// <returns>The lazy loaded sequence of new objects.</returns>
            public static global::System.Collections.Generic.IEnumerable<<#= ctx.CODE.Escape(entity) #>> BuildAll<TReader, S>(TReader reader, global::System.Action<<#= ctx.CODE.Escape(entity) #>, TReader, S> setup = null, global::System.Func<<#= ctx.CODE.Escape(entity) #>, TReader, S> setupStateFactory = null) where TReader : global::System.Data.IDataReader
            {
                if (reader == null)
                    throw new global::System.ArgumentNullException("reader");

                while (reader.Read())
                    yield return Build<TReader, S>(rec: reader, setup: setup, setupStateFactory: setupStateFactory);
            }

            /// <summary>
            /// Loads data into this object from a data record.
            /// </summary>
            /// <typeparam name="TRec">Type of the data record.</typeparam>
            /// <param name="rec">The data record from where loading the data from.</param>
            /// <param name="setup">The optional setup action that is invoked after data have been loaded into that object.</param>
            /// <exception cref="global::System.ArgumentNullException">
            /// <paramref name="rec" /> is <see langword="null" />.
            /// </exception>
            public void LoadFrom<TRec>(TRec rec, global::System.Action<<#= ctx.CODE.Escape(entity) #>, TRec> setup = null) where TRec : global::System.Data.IDataRecord
            {
                this.LoadFrom<TRec, object>(rec: rec, setup: setup != null ? new global::System.Action<<#= ctx.CODE.Escape(entity) #>, TRec, object>((e, r, s) => setup(e, r)) : null, setupState: null);
            }

            /// <summary>
            /// Loads data into this object from a data record.
            /// </summary>
            /// <typeparam name="TRec">Type of the data record.</typeparam>
            /// <typeparam name="S">The type of the last parameter for <paramref name="setup" />.</typeparam>
            /// <param name="rec">The data record from where loading the data from.</param>
            /// <param name="setup">The optional setup action that is invoked after data have been loaded into that object.</param>
            /// <param name="setupState">The last parameter for <paramref name="setup" />.</param>
            /// <exception cref="global::System.ArgumentNullException">
            /// <paramref name="rec" /> is <see langword="null" />.
            /// </exception>
            public void LoadFrom<TRec, S>(TRec rec, global::System.Action<<#= ctx.CODE.Escape(entity) #>, TRec, S> setup = null, S setupState = default(S)) where TRec : global::System.Data.IDataRecord
            {
                this.LoadFrom<TRec, S>(rec: rec, setup: setup, setupStateFactory: (e, r) => setupState);
            }

            /// <summary>
            /// Loads data into this object from a data record.
            /// </summary>
            /// <typeparam name="TRec">Type of the data record.</typeparam>
            /// <typeparam name="S">The type of the last parameter for <paramref name="setup" />.</typeparam>
            /// <param name="rec">The data record from where loading the data from.</param>
            /// <param name="setup">The optional setup action that is invoked after data have been loaded into that object.</param>
            /// <param name="setupStateFactory">The optional factory for last parameter of <paramref name="setup" />.</param>
            /// <exception cref="global::System.ArgumentNullException">
            /// <paramref name="rec" /> is <see langword="null" />.
            /// </exception>
            public void LoadFrom<TRec, S>(TRec rec, global::System.Action<<#= ctx.CODE.Escape(entity) #>, TRec, S> setup = null, global::System.Func<<#= ctx.CODE.Escape(entity) #>, TRec, S> setupStateFactory = null) where TRec : global::System.Data.IDataRecord
            {
                if (rec == null)
                    throw new global::System.ArgumentNullException("rec");
 
<#+

            foreach (var sf in scalarFields)
            {
                var fieldName = ctx.CODE.Escape(sf.Name);
                var ordFieldName = "o" + fieldName;

#>
                var <#= ordFieldName #> = rec.GetOrdinal(<#= ctx.CODE.CreateLiteral(fieldName) #>);
<#+
            }

#>
 
<#+

            foreach (var sf in scalarFields)
            {
                var fieldName = ctx.CODE.Escape(sf.Name);
                var ordFieldName = "o" + fieldName;
                var fieldType = ctx.TOOLS.ClrType(sf.TypeUsage).FullName;

#>
                this.<#= fieldName #> = (global::<#= fieldType #>)(!rec.IsDBNull(<#= ordFieldName #>) ? rec.GetValue(<#= ordFieldName #>) : null);
<#+
            }

#>
 
                if (setup != null)
                    setup(this, rec, setupStateFactory == null ? default(S) : setupStateFactory(this, rec));
            }

            #endregion
        }
        
        #endregion
<#+
        }

        if (!IsDefaultSchema(schema))
        {
#>

    }
 
<#+
        }
    }

    this.EndNamespace(namespaceExtension, ctx);
}

static bool IsDefaultSchema(string schemaName)
{
    return string.IsNullOrWhiteSpace(schemaName) ||
           schemaName.ToLower().Trim() == "dbo";
}

static string TryGetSchemaName(FileInfo edmxFile, EntityType entity, EntityGenerationContext ctx)
{
    var edmxFilePath = edmxFile.FullName;
    string result = null;

    EntityContainer sicEntityContainer = null;

    StoreItemCollection sic;
    if (ctx.LOADER.TryCreateStoreItemCollection(edmxFilePath, out sic))
    {
        sicEntityContainer = sic.GetItems<EntityContainer>().FirstOrDefault();
    }    

    if (sicEntityContainer != null)
    {
        var entitySet = sicEntityContainer.GetEntitySetByName(ctx.CODE.Escape(entity), true);
        if (entitySet != null)
        {
            var metaProperties = entitySet.MetadataProperties["Schema"];
            if (metaProperties != null)
            {
                result = (metaProperties.Value ?? string.Empty).ToString().Trim();
                if (result == string.Empty)
                {
                    result = null;
                }
            }

            if (result == null)
            {
                // store:Schema
                metaProperties = entitySet.MetadataProperties["http://schemas.microsoft.com/ado/2007/12/edm/EntityStoreSchemaGenerator:Schema"];
                if (metaProperties != null)
                {
                    result = (metaProperties.Value ?? string.Empty).ToString().Trim();
                    if (result == string.Empty)
                    {
                        result = null;
                    }
                }
            }
        }
    }

    return result;
}


sealed class EntityGenerationContext
{
    public readonly CodeGenerationTools CODE;
    public readonly EntityFrameworkTemplateFileManager FILE_MANAGER;
    public readonly MetadataLoader LOADER;
    public readonly string NAMESPACE;
    public readonly GeneratedTextTransformation PARENT;
    public readonly CodeRegion REGION;
    public readonly MetadataTools TOOLS;
    public readonly DirectoryInfo WORKING_DIRECTORY;

    public EntityGenerationContext(GeneratedTextTransformation parent)
    {
        this.PARENT = parent;
        this.WORKING_DIRECTORY = new DirectoryInfo(this.PARENT.Host.ResolvePath("./"));

        this.CODE = new CodeGenerationTools(this.PARENT);
        this.LOADER = new MetadataLoader(this.PARENT);
        this.REGION = new CodeRegion(this.PARENT, 1);
        this.TOOLS = new MetadataTools(this.PARENT);
        this.FILE_MANAGER = EntityFrameworkTemplateFileManager.Create(this.PARENT);

        this.NAMESPACE = this.CODE.VsNamespaceSuggestion();
    }
}

#>